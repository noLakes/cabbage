(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function n(n){e(1,arguments);var a=t(n);return!isNaN(a)}var a={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function r(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var i,o={date:r({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:r({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:r({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,o=r.width?String(r.width):i;a=e.formattingValues[o]||e.formattingValues[i]}else{var c=e.defaultWidth,d=r.width?String(r.width):e.defaultWidth;a=e.values[d]||e.values[c]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function s(e){return function(t,n){var a=String(t),r=n||{},i=r.width,o=i&&e.matchPatterns[i]||e.matchPatterns[e.defaultMatchWidth],c=a.match(o);if(!c)return null;var d,s=c[0],u=i&&e.parsePatterns[i]||e.parsePatterns[e.defaultParseWidth];return d="[object Array]"===Object.prototype.toString.call(u)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(u):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(u),d=e.valueCallback?e.valueCallback(d):d,{value:d=r.valueCallback?r.valueCallback(d):d,rest:a.slice(s.length)}}}const u={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof a[e]?a[e]:1===t?a[e].one:a[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:o,formatRelative:function(e,t,n,a){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},r=n.match(i.matchPattern);if(!r)return null;var o=r[0],c=n.match(i.parsePattern);if(!c)return null;var d=i.valueCallback?i.valueCallback(c[0]):c[0];return{value:d=a.valueCallback?a.valueCallback(d):d,rest:n.slice(o.length)}}),era:s({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:s({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:s({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:s({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:s({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function l(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function h(n,a){e(2,arguments);var r=t(n).getTime(),i=l(a);return new Date(r+i)}function m(t,n){e(2,arguments);var a=l(n);return h(t,-a)}function p(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const f=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return p("yy"===t?a%100:a,t.length)},g=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):p(n+1,2)},b=function(e,t){return p(e.getUTCDate(),t.length)},y=function(e,t){return p(e.getUTCHours()%12||12,t.length)},v=function(e,t){return p(e.getUTCHours(),t.length)},w=function(e,t){return p(e.getUTCMinutes(),t.length)},k=function(e,t){return p(e.getUTCSeconds(),t.length)},C=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return p(Math.floor(a*Math.pow(10,n-3)),t.length)};var T=864e5;function S(n){e(1,arguments);var a=1,r=t(n),i=r.getUTCDay(),o=(i<a?7:0)+i-a;return r.setUTCDate(r.getUTCDate()-o),r.setUTCHours(0,0,0,0),r}function M(n){e(1,arguments);var a=t(n),r=a.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(r+1,0,4),i.setUTCHours(0,0,0,0);var o=S(i),c=new Date(0);c.setUTCFullYear(r,0,4),c.setUTCHours(0,0,0,0);var d=S(c);return a.getTime()>=o.getTime()?r+1:a.getTime()>=d.getTime()?r:r-1}function q(t){e(1,arguments);var n=M(t),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var r=S(a);return r}var j=6048e5;function L(n,a){e(1,arguments);var r=a||{},i=r.locale,o=i&&i.options&&i.options.weekStartsOn,c=null==o?0:l(o),d=null==r.weekStartsOn?c:l(r.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=t(n),u=s.getUTCDay(),h=(u<d?7:0)+u-d;return s.setUTCDate(s.getUTCDate()-h),s.setUTCHours(0,0,0,0),s}function D(n,a){e(1,arguments);var r=t(n,a),i=r.getUTCFullYear(),o=a||{},c=o.locale,d=c&&c.options&&c.options.firstWeekContainsDate,s=null==d?1:l(d),u=null==o.firstWeekContainsDate?s:l(o.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(i+1,0,u),h.setUTCHours(0,0,0,0);var m=L(h,a),p=new Date(0);p.setUTCFullYear(i,0,u),p.setUTCHours(0,0,0,0);var f=L(p,a);return r.getTime()>=m.getTime()?i+1:r.getTime()>=f.getTime()?i:i-1}function x(t,n){e(1,arguments);var a=n||{},r=a.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:l(i),c=null==a.firstWeekContainsDate?o:l(a.firstWeekContainsDate),d=D(t,n),s=new Date(0);s.setUTCFullYear(d,0,c),s.setUTCHours(0,0,0,0);var u=L(s,n);return u}var _=6048e5;function E(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=t||"";return n+String(r)+o+p(i,2)}function P(e,t){return e%60==0?(e>0?"-":"+")+p(Math.abs(e)/60,2):U(e,t)}function U(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+p(Math.floor(r/60),2)+n+p(r%60,2)}const H={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return f(e,t)},Y:function(e,t,n,a){var r=D(e,a),i=r>0?r:1-r;return"YY"===t?p(i%100,2):"Yo"===t?n.ordinalNumber(i,{unit:"year"}):p(i,t.length)},R:function(e,t){return p(M(e),t.length)},u:function(e,t){return p(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return p(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return p(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return g(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return p(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(n,a,r,i){var o=function(n,a){e(1,arguments);var r=t(n),i=L(r,a).getTime()-x(r,a).getTime();return Math.round(i/_)+1}(n,i);return"wo"===a?r.ordinalNumber(o,{unit:"week"}):p(o,a.length)},I:function(n,a,r){var i=function(n){e(1,arguments);var a=t(n),r=S(a).getTime()-q(a).getTime();return Math.round(r/j)+1}(n);return"Io"===a?r.ordinalNumber(i,{unit:"week"}):p(i,a.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):b(e,t)},D:function(n,a,r){var i=function(n){e(1,arguments);var a=t(n),r=a.getTime();a.setUTCMonth(0,1),a.setUTCHours(0,0,0,0);var i=a.getTime(),o=r-i;return Math.floor(o/T)+1}(n);return"Do"===a?r.ordinalNumber(i,{unit:"dayOfYear"}):p(i,a.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return p(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return p(i,t.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return p(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):v(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):p(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):p(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):w(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k(e,t)},S:function(e,t){return C(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return P(r);case"XXXX":case"XX":return U(r);case"XXXXX":case"XXX":default:return U(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return P(r);case"xxxx":case"xx":return U(r);case"xxxxx":case"xxx":default:return U(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+E(r,":");case"OOOO":default:return"GMT"+U(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+E(r,":");case"zzzz":default:return"GMT"+U(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return p(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return p((a._originalDate||e).getTime(),t.length)}};function O(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function N(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const W={p:N,P:function(e,t){var n,a=e.match(/(P+)(p+)?/),r=a[1],i=a[2];if(!i)return O(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",O(r,t)).replace("{{time}}",N(i,t))}};var Y=6e4;function z(e){return e.getTime()%Y}function Q(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(Y+z(t))%Y:z(t);return n*Y+a}var F=["D","DD"],X=["YY","YYYY"];function A(e){return-1!==F.indexOf(e)}function B(e){return-1!==X.indexOf(e)}function G(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var R=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,I=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,J=/^'([^]*?)'?$/,$=/''/g,V=/[a-zA-Z]/;function K(a,r,i){e(2,arguments);var o=String(r),c=i||{},d=c.locale||u,s=d.options&&d.options.firstWeekContainsDate,h=null==s?1:l(s),p=null==c.firstWeekContainsDate?h:l(c.firstWeekContainsDate);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=d.options&&d.options.weekStartsOn,g=null==f?0:l(f),b=null==c.weekStartsOn?g:l(c.weekStartsOn);if(!(b>=0&&b<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var y=t(a);if(!n(y))throw new RangeError("Invalid time value");var v=Q(y),w=m(y,v),k={firstWeekContainsDate:p,weekStartsOn:b,locale:d,_originalDate:y},C=o.match(I).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,W[t])(e,d.formatLong,k):e})).join("").match(R).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return Z(e);var n=H[t];if(n)return!c.useAdditionalWeekYearTokens&&B(e)&&G(e,r,a),!c.useAdditionalDayOfYearTokens&&A(e)&&G(e,r,a),n(w,e,d.localize,k);if(t.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return C}function Z(e){return e.match(J)[1].replace($,"'")}const ee=function(){let e=null;const t=()=>{localStorage.setItem("cabbage_db",JSON.stringify(e))},n=()=>!!localStorage.cabbage_db&&(e=JSON.parse(localStorage.cabbage_db),!0),a=e=>e.split("-").map((e=>Number(e))),r=t=>(e.uids[t]+=1,String(e.uids[t])),i=(e,t)=>e.concat(`-${t}`),o=t=>{if("string"==typeof t&&(t=a(t)),0===t.length)return;let n=e.projects[t.shift()];for(;t.length>0;)n=n.children[t.shift()];return n},c=()=>{const t=[];for(const n in e.projects){const a=Object.values(e.projects[n].children);t.push(a)}return t.flat()},d=(e,n)=>{const r=a(n.uid).pop();e.children[r]=n,t()},s=e=>{if(e.due)return new Date(e.due)};return{parse_uid:a,uid_to_s:e=>e.join("-"),request_uid:r,merge_uid:i,fetch:o,fetchProjects:()=>e.projects,insert:d,add_project:n=>{const i=function(e){return{uid:null,type:"project",name:e,children:{}}}(n);i.uid=r("project"),e.projects[a(i.uid)[0]]=i,t()},add_task:(e,t,n,a=0)=>{const c=function(e,t="",n=0){return{uid:null,type:"task",children:{},complete:!1,name:e,info:t,due:n}}(t,n,a),s=o(e);c.uid=i(s.uid,r("task")),d(s,c)},add_check:(e,t)=>{const n=function(e){return{uid:null,type:"checkItem",complete:!1,name:e}}(t),a=o(e);n.uid=i(a.uid,r("check")),d(a,n)},update_item:(e,n)=>{const a=o(e);for(const e in n)a[e]=n[e];t()},save:t,load:n,fetch_raw:()=>e,initialize:()=>{n()||(e={projects:{},uids:{project:-1,task:-1,check:-1}},t())},parseDate:s,dateQuery:e=>c().filter((t=>s(t)<e)),fetchAllTasks:c,fetchTasksByDue:()=>{const e=c().sort(((e,t)=>e.due<t.due?-1:e.due>t.due?1:0));return[...e.filter((e=>e.due)),...e.filter((e=>!e.due))]},formatDateForPicker:e=>e.due?K(Number(e.due),"yyyy/MM/dd").replace(/\//g,"-"):"",remove:n=>{const r=(n=a(n)).pop();n.length<1?delete e.projects[r]:delete o(n).children[r],t()}}}(),te={main:document.querySelector(".main-container"),nav:document.querySelector(".nav-container"),static_links:document.querySelectorAll(".static-links a"),project_links_container:document.querySelector(".project-links"),new_project_button:document.querySelector("button.new-project"),content:document.querySelector(".content-container"),footer:document.querySelector(".footer-container"),modal:document.querySelector(".modal"),basic(e,t,n){const a=document.createElement(e);return t&&t.split(",").forEach((e=>{a.classList.add(e)})),n&&(a.id=n),a}},ne={check_form(e=!1){const t=te.basic("div","check-form-container"),n=te.basic("form","check-form"),a=te.basic("input","name-input");a.placeholder="new task!",e&&(a.value=e.name,a.dataset.uid=e.uid);const r=te.basic("button","save-check,content-button");r.innerHTML="save",r.addEventListener("click",(()=>{if(e)ee.update_item(a.dataset.uid,{name:a.value}),t.nextSibling.querySelector(".name").innerHTML=a.value,t.nextSibling.style.display="flex";else{ee.add_check(document.querySelector(".modal-content").dataset.uid,a.value);const e=ee.fetch(document.querySelector(".modal-content").dataset.uid),n=Object.values(e.children).filter((e=>e.name===a.value))[0];t.parentElement.appendChild(this.check(n))}t.remove()}));const i=te.basic("button","cancel-check,content-button");return i.innerHTML="cancel",i.addEventListener("click",(()=>{e&&(t.nextSibling.style.display="flex"),t.remove()})),n.appendChild(a),n.appendChild(r),n.appendChild(i),t.appendChild(n),t},check(e){const t=te.basic("div","check");t.dataset.uid=e.uid;const n=te.basic("label","checkbox-container"),a=te.basic("input","checkbox");a.type="checkbox",a.checked=e.complete,a.addEventListener("change",(t=>{t.target.checked?(ee.update_item(e.uid,{complete:!0}),t.target.parentElement.parentElement.querySelector(".name").classList.add("checked")):t.target.checked||(ee.update_item(e.uid,{complete:!1}),t.target.parentElement.parentElement.querySelector(".name").classList.remove("checked"))}));const r=te.basic("span","checkmark");n.appendChild(a),n.appendChild(r),t.appendChild(n);const i=te.basic("p","name");e.complete&&i.classList.add("checked"),i.innerHTML=e.name,t.appendChild(i);const o=te.basic("div","action-container"),c=te.basic("a","edit-check,content-button");c.appendChild(te.basic("i","fas,fa-edit")),c.addEventListener("click",(()=>{t.parentElement.insertBefore(this.check_form(e),t),t.style.display="none",document.querySelector("input.name-input").focus()}));const d=te.basic("a","delete-check,content-button");return d.appendChild(te.basic("i","fas,fa-trash-alt")),d.addEventListener("click",(()=>{ee.remove(t.dataset.uid),t.remove()})),o.appendChild(c),o.appendChild(d),o.style.display="none",t.appendChild(o),t.addEventListener("mouseenter",(e=>{o.style.display="block"})),t.addEventListener("mouseleave",(e=>{o.style.display="none"})),t},tasks_container:()=>te.basic("div","tasks-container"),task_tile(e){const t=te.basic("a","task-tile");e.complete&&t.classList.add("complete");const n=te.basic("div","heading-container"),a=te.basic("h3","title");a.innerHTML=e.name,n.appendChild(a),t.appendChild(n);const r=te.basic("div","info-container");if(e.due){const t=te.basic("p","due-date");t.appendChild(te.basic("i","far,fa-clock")),t.appendChild(document.createTextNode(K(e.due,"MMM/dd").replace(/\//g," "))),r.appendChild(t)}if(function(e){if(!e||!e.children)return 0;const t=e.children;return Object.values(t).length}(e)){const t=function(e){if(!e||!e.children)return[0,0];const t=Object.values(e.children);return[t.filter((e=>e.complete)).length,t.length]}(e),n=te.basic("p","list-counter");n.appendChild(te.basic("i","far,fa-check-square")),n.appendChild(document.createTextNode(`${t[0]}/${t[1]}`)),t[0]===t[1]&&n.classList.add("tasks-complete"),r.appendChild(n)}return t.appendChild(r),t},task_modal(e){const t=te.basic("div","modal-content");t.dataset.uid=e.uid,e.complete&&t.classList.add("done");const n=te.basic("div","header-container"),a=te.basic("div","left"),r=te.basic("textarea","title");r.innerHTML=e.name,a.appendChild(r);const i=te.basic("p","project-tag");i.innerHTML="in project ";const o=te.basic("a","project-link"),c=te.basic("span");o.innerHTML=ee.fetch(e.uid.split("-")[0]).name,o.dataset.uid=String(e.uid.split("-")[0]),c.appendChild(o),i.appendChild(c),a.appendChild(i),n.appendChild(a);const d=te.basic("div","right"),s=te.basic("button","complete,content-button");e.complete&&s.classList.add("done"),s.innerHTML="complete",s.addEventListener("click",(t=>{t.target.classList.contains("done")?(t.target.classList.remove("done"),document.querySelector(".modal-content").classList.remove("done"),ee.update_item(e.uid,{complete:!1})):(t.target.classList.add("done"),document.querySelector(".modal-content").classList.add("done"),ee.update_item(e.uid,{complete:!0}))})),d.appendChild(s);const u=te.basic("button","add-due,content-button");u.innerHTML="+ due date",e.due&&(u.style.display="none"),u.addEventListener("click",(e=>{e.target.style.display="none",document.querySelector(".due-container").style.display="block"})),d.appendChild(u);const l=te.basic("button","delete,content-button");l.innerHTML="delete",d.appendChild(l),n.appendChild(d),t.appendChild(n);const h=te.basic("div","due-container"),m=te.basic("h4","modal-sub-heading","due-heading");m.innerHTML="Due",h.appendChild(m);const p=te.basic("div","due-controls");e.due||(h.style.display="none");const f=te.basic("input","due-input");f.type="date",f.value=ee.formatDateForPicker(e),p.appendChild(f);const g=te.basic("button","delete-due,content-button");g.innerHTML="remove",g.addEventListener("click",(e=>{h.style.display="none",document.querySelector(".add-due").style.display="block",f.value=""})),p.appendChild(g),h.appendChild(p),t.appendChild(h);const b=te.basic("div","info-container"),y=te.basic("h4","modal-sub-heading","info-heading");y.innerHTML="Info",b.appendChild(y);const v=te.basic("textarea","info");e.info&&(v.value=e.info),v.placeholder="add more information here...",b.appendChild(v),t.appendChild(b);const w=te.basic("div","checklist-container"),k=te.basic("h4","modal-sub-heading","check-heading");k.innerHTML="Checklist",w.appendChild(k);const C=te.basic("div","checklist");for(let t in e.children)C.appendChild(this.check(e.children[t]));const T=te.basic("button","add-item,content-button");return T.innerHTML="+ item",T.addEventListener("click",(()=>{C.appendChild(this.check_form())})),w.appendChild(C),w.appendChild(T),t.appendChild(w),t},edit_project_form(e){const t=te.basic("form","edit-project-form"),n=te.basic("input","edit-project-name,content-input");n.type="text",n.value=e.name,t.appendChild(n);const a=te.basic("input","submit-edit,content-button");a.type="button",a.dataset.uid=e.uid,a.value="save",t.appendChild(a);const r=te.basic("input","cancel-edit,content-button");r.type="button",r.value="cancel",t.appendChild(r);const i=te.basic("input","delete-project,content-button");return i.type="button",i.value="delete",t.appendChild(i),t},new_task_form(e){const t=te.basic("div","new-task-tile"),n=te.basic("form","new-task-form"),a=te.basic("input","task-name,content-input");a.type="text",a.placeholder="new task!",n.appendChild(a);const r=te.basic("div","controls-container"),i=te.basic("input","submit-task,content-button");i.type="button",i.dataset.uid=e,i.value="save",r.appendChild(i);const o=te.basic("input","cancel-task,content-button");return o.type="button",o.value="cancel",r.appendChild(o),n.appendChild(r),t.appendChild(n),t},projectHeading(e,t="h2"){const n=te.basic("div","project-heading-container"),a=te.basic(t,"project-heading");a.innerHTML=e.name,n.appendChild(a);const r=te.basic("a","edit-project");r.appendChild(te.basic("i","fas,fa-edit")),n.appendChild(r);const i=te.basic("button","new-task-button,content-button");return i.dataset.uid=e.uid,i.appendChild(te.basic("i","fas,fa-plus-square")),i.appendChild(document.createTextNode(" new task")),n.appendChild(i),n},staticHeading(e){const t=te.basic("div","project-heading-container"),n=te.basic("h2","project-heading");return n.innerHTML=e,t.appendChild(n),t},projectNav(e){const t=te.basic("li","project-item"),n=te.basic("a","project-link");return n.dataset.uid=e.uid,n.innerHTML=e.name,t.appendChild(n),t},new_project_form(){const e=te.basic("form"),t=te.basic("input","project-name");t.type="text",t.placeholder="new project!",e.appendChild(t);const n=te.basic("input","submit-project,nav-button");n.type="button",n.value="save",e.appendChild(n);const a=te.basic("input","cancel-project,nav-button");return a.type="button",a.value="cancel",e.appendChild(a),e},nothingDisplay(){const e=te.basic("p","nothing");return e.innerHTML="there is nothing here right now...",e}},ae=function(){const e=()=>{const e=new Date;return new Date(e.getFullYear(),e.getMonth(),e.getDate(),23,59,59)},t=()=>{const e=new Date;return e.setHours(0,0,0,0),e};return{endOfDay:e,startOfDay:t,oneWeek:()=>new Date(Number(e())+6148e5),getDateStyle:n=>0!==(n=Number(n))&&(n>t()&&n<e()?"due-today":n<t()?"overdue":n<new Date(t().getTime()+6148e5)&&"soon")}}(),re=function(){const e=()=>{document.querySelectorAll(".nav-container a").forEach((e=>{e.classList.remove("active")})),document.querySelectorAll(".nav-container li").forEach((e=>{e.classList.remove("active")}))},t=()=>{te.content.innerHTML=""},n=()=>{const e=ee.fetchProjects();for(let t in e){const n=ne.projectNav(e[t]);n.querySelector("a").addEventListener("click",g),te.project_links_container.appendChild(n)}},a=()=>{te.project_links_container.innerHTML="",n(),t();const e=document.querySelector(".time-link#home");e.classList.add("active"),f(e)},r=()=>{const e=document.querySelector("a.active");te.project_links_container.innerHTML="",n(),e.classList.contains("time-link")||document.querySelector(`[data-uid='${e.dataset.uid}']`).classList.add("active")},i=()=>{t();const e=document.querySelector("a.active");f(e)},o=e=>{const t=ne.projectHeading(e);t.querySelector("a.edit-project").addEventListener("click",(t=>{document.querySelector(".project-heading").remove(),(e=>{document.querySelector("a.edit-project").remove();const t=ne.edit_project_form(e);t.querySelector(".submit-edit").addEventListener("click",(n=>{ee.update_item(e.uid,{name:t.querySelector(".edit-project-name").value}),r(),d(e.uid)})),t.querySelector(".cancel-edit").addEventListener("click",(t=>{d(e.uid)})),t.querySelector(".delete-project").addEventListener("click",(()=>{confirm(`Delete ${e.name}? This will delete all sub-tasks as well.`)&&(ee.remove(e.uid),a())})),te.content.querySelector(".project-heading-container").prepend(t),document.querySelector("input.edit-project-name").focus()})(e)})),t.querySelector(".new-task-button").addEventListener("click",(e=>{(e=>{const t=ne.new_task_form(e);var n;(n=t).querySelector("input.submit-task").addEventListener("click",(e=>{n.querySelector(".task-name").value.length>0?(ee.add_task(e.target.dataset.uid,n.querySelector(".task-name").value),i()):alert("Task name required.")})),n.querySelector(".cancel-task").addEventListener("click",(e=>{n.remove(),m()&&p(),document.querySelector(".new-task-button").disabled=!1})),document.querySelector(".tasks-container").prepend(t),document.querySelector(".new-task-tile .task-name").focus()})(e.target.dataset.uid),document.querySelector(".nothing")&&document.querySelector(".nothing").remove(),e.target.disabled=!0})),te.content.prepend(t)},c=()=>{te.content.appendChild(ne.tasks_container())},d=e=>{t();const n=ee.fetch(e);o(n),c();for(let e in n.children)u(n.children[e])},s=(e=!0)=>{const t=document.querySelector(".modal");"block"===t.style.display?(e&&(()=>{const e=ee.fetch(document.querySelector(".modal-content").dataset.uid).name;let t=document.querySelector(".due-input").valueAsNumber;t=isNaN(t)?0:new Date(t).getTime()+181e5,ee.update_item(document.querySelector(".modal-content").dataset.uid,{name:document.querySelector("textarea.title").value||e,info:document.querySelector("textarea.info").value,due:t})})(),i(),t.style.display="none"):t.style.display="block"},u=t=>{const n=ne.task_tile(t);n.addEventListener("click",(()=>{(t=>{te.modal.innerHTML="",te.modal.appendChild(ne.task_modal(t)),te.modal.querySelector("button.delete").addEventListener("click",(()=>{confirm(`Delete ${t.name}?`)&&(ee.remove(t.uid),s(!1))})),te.modal.querySelector(".project-link").addEventListener("click",(t=>{s(),e(),te.project_links_container.querySelector(`[data-uid='${t.target.dataset.uid}']`).classList.add("active"),d(t.target.dataset.uid)})),ae.getDateStyle(t.due)&&!t.complete&&te.modal.querySelector(".due-input").classList.add(ae.getDateStyle(t.due)),s()})(t)})),ae.getDateStyle(t.due)&&!t.complete&&n.querySelector(".due-date").classList.add(ae.getDateStyle(t.due)),document.querySelector(".tasks-container").appendChild(n)},l=(e,n=!0)=>{t(),c(),e.forEach((e=>{!n&&e.complete||u(e)}))},h=e=>{te.content.prepend(ne.staticHeading(e))},m=()=>0===document.querySelector(".tasks-container").childElementCount,p=()=>{document.querySelector(".tasks-container").appendChild(ne.nothingDisplay())},f=e=>{if(e.classList.contains("time-link"))switch(e.id){case"today":l(ee.dateQuery(ae.endOfDay()),!1),h("Today");break;case"upcoming":l(ee.dateQuery(ae.oneWeek()),!1),h("Upcoming");break;default:l(ee.fetchTasksByDue()),h("Home")}else d(e.dataset.uid);m()&&p()},g=t=>{t.target.classList.contains("active")||(e(),t.target.classList.add("active"),t.target.classList.contains("project-link")&&t.target.parentElement.classList.add("active"),f(t.target))};return te.static_links.forEach((e=>{e.addEventListener("click",g)})),te.new_project_button.addEventListener("click",(e=>{(()=>{const e=ne.new_project_form();e.querySelector("input.submit-project").addEventListener("click",(t=>{const n=e.querySelector("input.project-name").value;n.length>0?(ee.add_project(n),te.new_project_button.style.display="block",t.target.parentElement.remove(),r()):alert("Project name required.")})),e.querySelector("input.cancel-project").addEventListener("click",(e=>{te.new_project_button.style.display="block",e.target.parentElement.remove()})),te.project_links_container.appendChild(e),document.querySelector(".nav-container .project-name").focus()})(),e.target.style.display="none"})),window.onclick=e=>{e.target==te.modal&&s()},{initHome:a}}();!function(e="localStorage"){var t;try{t=window[e];var n="__storage_test__";return t.setItem(n,n),t.removeItem(n),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}("localStorage")?alert("Please allow local storage permissions and refresh this page!"):(ee.initialize(),ee.fetch_raw().projects[0]||(ee.add_project("general"),ee.add_task("0","welcome","welcome to cabbage! a super lightweight to-do list app made by yours truly in an effort to get better at javascript",0),ee.add_check("0-0","add your own projects (they are like a folder for your tasks)"),ee.add_check("0-0","make a new task for your project"),ee.add_check("0-0","give that task a lil' description"),ee.add_check("0-0","create a couple of checklist items for your new task"),ee.add_check("0-0","take time in life for the little things")),re.initHome())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,